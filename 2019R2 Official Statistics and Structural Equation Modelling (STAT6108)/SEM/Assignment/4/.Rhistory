textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
fit <- lavaan(HS.model, data=HolzingerSwineford1939,
auto.var=TRUE, auto.fix.first=TRUE,
auto.cov.lv.x=TRUE)
summary(fit, fit.measures=TRUE)
model <- 'HelpsSeekingBehavior =~ V1 + V3 + V6 + V9
ProblemFocusedCoping =~ V2 + V4 + V8 + V10
EmotionFocusedCoping =~ V5 + V7'
uli <- lavaan(model, data=teachers)
model <- 'HelpsSeekingBehavior =~ V1 + V3 + V6 + V9
ProblemFocusedCoping =~ V2 + V4 + V8 + V10
EmotionFocusedCoping =~ V5 + V7'
uli <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, fixed.x=FALSE, std.lv=TRUE)
summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
model <- 'HelpsSeekingBehavior =~ V1 + V3 + V6 + V9
ProblemFocusedCoping =~ V2 + V4 + V8 + V10
EmotionFocusedCoping =~ V5 + V7
HelpsSeekingBehavior ~~ ProblemFocusedCoping
HelpsSeekingBehavior ~~ EmotionFocusedCoping
ProblemFocusedCoping ~~ EmotionFocusedCoping'
uli <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, fixed.x=FALSE, std.lv=TRUE)
summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uli <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, auto.cov.lv.x=TRUE)
summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uli <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, fixed.x=FALSE, std.lv=TRUE, auto.cov.lv.x=TRUE)
summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uli <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, fixed.x=FALSE,  auto.cov.lv.x=TRUE)
summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uli <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, std.lv=FALSE, fixed.x=FALSE)
summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uvi <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=FALSE, std.lv=TRUE, fixed.x=FALSE)
summary(uvi, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uli <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, std.lv=FALSE)
summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uvi <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=FALSE, std.lv=TRUE)
summary(uvi, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
model <- 'HelpsSeekingBehavior =~ V1 + V3 + V6 + V9
ProblemFocusedCoping =~ V2 + V4 + V8 + V10
EmotionFocusedCoping =~ V5 + V7
HelpsSeekingBehavior ~~ ProblemFocusedCoping
HelpsSeekingBehavior ~~ EmotionFocusedCoping
ProblemFocusedCoping ~~ EmotionFocusedCoping'
model <- 'HelpsSeekingBehavior =~ V1 + V3 + V6 + V9;
ProblemFocusedCoping =~ V2 + V4 + V8 + V10;
EmotionFocusedCoping =~ V5 + V7;
HelpsSeekingBehavior ~~ ProblemFocusedCoping;
HelpsSeekingBehavior ~~ EmotionFocusedCoping;
ProblemFocusedCoping ~~ EmotionFocusedCoping'
fit <- cfa(model, data = teachers)
semPaths(fit, intercepts = FALSE)
install.packages("semPlot")
library(semPlot)
semPaths(fit, intercepts = FALSE)
semPaths(fit, intercepts = TRUE)
fit <- cfa(model, data = teachers)
semPlot::semPaths(fit, intercepts = TRUE, )
detach("package:semPlot", unload = TRUE)
semPlot::semPaths(fit, intercepts = TRUE, style = "ram")
semPlot::semPaths(fit, intercepts = TRUE, style = "mx")
semPlot::semPaths(fit, intercepts = TRUE, style = "OpenMx")
semPlot::semPaths(fit, intercepts = FALSE, style = "OpenMx")
semPlot::semPaths(fit, intercepts = FALSE, residuals = 0)
semPlot::semPaths(fit, intercepts = FALSE, residuals = 1)
semPlot::semPaths(title = "Path diagram of CFA model",object = fit, intercepts = FALSE)
semPlot::semPaths(title = "Path diagram of CFA model", object = fit, intercepts = FALSE)
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE)
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "par")
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "path")
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "diagram")
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "mod")
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "est")
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "std")
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "eq")
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "col")
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "par")
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "path")
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "path", whatLabels = "name")
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "path", whatLabels = "path")
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "path", whatLabels = "est")
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "path", whatLabels = "no")
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "path", whatLabels = "name")
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "path", whatLabels = "cons")
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "path", whatLabels = "eq")
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "cons", whatLabels = "cons")
path
semPlot::semPaths(object = fit, intercepts = FALSE, title = TRUE, what = "path", whatLabels = "cons")
uvi <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=FALSE, std.lv=TRUE)
summary(uvi, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
summary(uli)
hihi = summary(uli
)
hihi$PE
m
uli-parameters <- summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uli-parameters <- summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uli-parameters <- summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uliParameters <- summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uliParameters$FIT
uli <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, std.lv=FALSE)
uliSummary <- summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uvi <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=FALSE, std.lv=TRUE)
uviSummary(uvi, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uviSummary <- sumary(uvi, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uviSummary <- summary(uvi, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uliSummary$PE
uviSummary$PE
# row numbers of fixed parameters in parameter table
uliFixedParameters <- c(1,5,9)
uviFixedParameters <- c(24,25,26)
# compare all paremeters except fixed parameters
identical(uliSummary$PE[-uliFixedParameters,], uviFixedParameters$PE[-uviFixedParameters,])
uliSummary$PE[-uliFixedParameters,]== uviFixedParameters$PE[-uviFixedParameters,]
uliSummary$PE[-uliFixedParameters,]
uviFixedParameters$PE[-uviFixedParameters,]
uviFixedParameters$PE
# row numbers of fixed parameters in parameter table
uliFixedParameters <- c(1,5,9)
uviFixedParameters <- c(24,25,26)
# compare all paremeters except fixed parameters
identical(uliSummary$PE[-uliFixedParameters,], uviSummary$PE[-uviFixedParameters,])
uliSummary$PE[-uliFixedParameters,]
uviSummary$PE[-uviFixedParameters,]
uliSummary$PE
uviSummary$PE
round(uviSummary$PE, 3)
uviSummary$PE[,-1:3] <- round(uviSummary$PE[,-1:3],3)
uviSummary$PE[,-c(1:3)] <- round(uviSummary$PE[,-c(1:3)],3)
uviSummary$PE
uliFixedParameters <- c(1,5,9)
uviFixedParameters <- c(24,25,26)
# round numbers to 3 decimal places
uliSummary$PE[,-c(1:3)] <- round(uliSummary$PE[,-c(1:3)],3)
uviSummary$PE[,-c(1:3)] <- round(uviSummary$PE[,-c(1:3)],3)
which(uliSummary$PE == uviSummary$PE)
uliSummary$PE[which(uliSummary$PE == uviSummary$PE),]
dim(uliSummary$PE)
dim(uviSummary$PE)
common <- intersect(uliSummary$PE,uviSummary$PE)
common
uli <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, std.lv=FALSE)
uliSummary <- summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
common
uliSummary$PE
uviSummary$PE
# round numbers to 3 decimal places
uliSummary$PE[,-c(1:3)] <- round(uliSummary$PE[,-c(1:3)],3)
uviSummary$PE[,-c(1:3)] <- round(uviSummary$PE[,-c(1:3)],3)
uliSummary$PE
uviSummary$PE
0.426+0.574
0.475+0.525
intersect(uliSummary$PE,uviSummary$PE)
intersect(uliSummary$PE,uviSummary$PE, orient = 'r')
uliSummary$PE[apply(uliSummary$PE==uviSummary$PE, 1, all),]
m3 <- rbind(uliSummary$PE, uviSummary$PE)
m3[duplicated(m3), , drop = FALSE]
# row numbers of fixed parameters in parameter table
uliFixedParameters <- c(1,5,9)
uviFixedParameters <- c(24,25,26)
# round numbers to 3 decimal places
uliSummary$PE[,-c(1:3)] <- round(uliSummary$PE[,-c(1:3)],3)
uviSummary$PE[,-c(1:3)] <- round(uviSummary$PE[,-c(1:3)],3)
# compare all paremeters except fixed parameters
intersaction <- rbind(uliSummary$PE, uviSummary$PE)
intersaction <- intersaction[duplicated(intersaction), , drop = FALSE]
intersaction
uliSummary$PE
uviSummary$PE
# compare all paremeters except fixed parameters
intersaction <- rbind(uliSummary$PE, uviSummary$PE)
duplicated(intersaction)
unique <- intersaction[unique(combined), , drop = FALSE]
# compare all paremeters except fixed parameters
combined <- rbind(uliSummary$PE, uviSummary$PE)
unique <- intersaction[unique(combined), , drop = FALSE]
unique <- combined[unique(combined), , drop = FALSE]
unique(combined)
unique(combined)
View(unique(combined))
duplicated(combined)
uliSummary$PE[!duplicated(combined),]
uliSummary$PE[!duplicated(combined),]
uviSummary$PE[!duplicated(combined),]
# compare all paremeters except fixed parameters
combined <- rbind(uliSummary$PE, uviSummary$PE)
intersaction <- combined[duplicated(combined), , drop = FALSE]
# compare all paremeters except fixed parameters
combined <- rbind(uliSummary$PE, uviSummary$PE)
combined[duplicated(combined), , drop = FALSE]
v
duplicated(combined)
# compare all paremeters except fixed parameters
combined <- rbind(uliSummary$PE, uviSummary$PE)
duplicated(combined)
uliSummary$PE[!duplicated(combined),, drop = TRUE]
uliSummary$PE[!duplicated(combined),, drop = TRUE]
combined[duplicated(combined), , drop = FALSE]
duplicated(combined)
# compare all paremeters except fixed parameters
combined <- rbind(uliSummary$PE, uviSummary$PE)
intersaction <- combined[duplicated(combined), , drop = FALSE]
uliSummary$PE[which(uliSummary$PE==intersaction\),]
uliSummary$PE[which(uliSummary$PE==intersaction),]
uliSummary$PE[which(uliSummary$PE %in% intersaction),]
uliSummary$PE[which(intersaction %in% uliSummary$PE),]
intersaction %in% uliSummary$PE
intersaction\
intersaction
uliSummary$FIT
uviSummary$FIT
identical(uliSummary$FIT, uviSummary$FIT)
uliSummary$FIT== uviSummary$FIT
identical(round(uliSummary$FIT, 3), roound(uviSummary$FIT, 3))
identical(round(uliSummary$FIT, 3), round(uviSummary$FIT, 3))
uli <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, std.lv=FALSE)
uliSummary <- summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uli <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, std.lv=FALSE)
uliSummary <- summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
# compare all paremeters except fixed parameters
combined <- rbind(uliSummary$PE, uviSummary$PE)
intersaction <- combined[duplicated(combined), , drop = FALSE]
# compare all paremeters except fixed parameters
combined <- rbind(uliSummary$PE, uviSummary$PE)
intersaction <- combined[duplicated(combined), , drop = FALSE]
intersaction
intersaction
# compare all paremeters except fixed parameters
combined <- rbind(uliSummary$PE, uviSummary$PE)
combined[duplicated(combined), , drop = FALSE]
uliFixedParameters <- c(1,5,9)
uviFixedParameters <- c(24,25,26)
# round numbers to 3 decimal places
uliSummary$PE[,-c(1:3)] <- round(uliSummary$PE[,-c(1:3)],3)
uviSummary$PE[,-c(1:3)] <- round(uviSummary$PE[,-c(1:3)],3)
# compare all paremeters except fixed parameters
combined <- rbind(uliSummary$PE, uviSummary$PE)
intersaction <- combined[duplicated(combined), , drop = FALSE]
intersaction
duplicated(combined)
dim(uviSummary$PE)
uliSummary$PE[!(duplicated(combined)[dim(uviSummary$PE)+1:,]),, drop = TRUE]
uliSummary$PE[!(duplicated(combined)[dim(uviSummary$PE)+1:]),, drop = TRUE]
uliSummary$PE[!(duplicated(combined)[dim(uviSummary$PE)[1]+1:,]),, drop = TRUE]
dim(uviSummary$PE)[1]
uliSummary$PE[!(duplicated(combined)[dim(uviSummary$PE)[1]+1:]),, drop = TRUE]
]tail(duplicated(combined), dim(uviSummary$PE)[1])
tail(duplicated(combined), dim(uviSummary$PE)[1])
tail <- tail(duplicated(combined), dim(uviSummary$PE)[1])
uliSummary$PE[!tail,, drop = TRUE]
uliSummary$PE[!tail,, drop = TRUE]
uviSummary$PE[!tail,, drop = TRUE]
uviSummary$PE[!tail,]
uviSummary$PE[!tail,]
uliSummary$PE[!tail,]
uviSummary$PE[!tail,]
# compare all paremeters except fixed parameters
combined <- rbind(uliSummary$PE, uviSummary$PE)
intersaction <- combined[duplicated(combined), , drop = FALSE]
intersaction
uliSummary$FIT
uliSummary
summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uliSummary$FIT
uliSummary$PE
# compare all paremeters except fixed parameters
combined <- rbind(uliSummary$PE, uviSummary$PE)
intersaction <- combined[duplicated(combined), , drop = FALSE]
intersaction
uliSummary$FIT$chisq
mi <- modindices(uliSummary)
mi <- modindices(uli)
mi
mi <- modindices(uli)
mi
modindices(uli)
modindices(uli, sort. = TRIE)
modindices(uli, sort. = TRUE)
mi$mi[1,2]
mi$mi[1:2]
mi$mi
mi <- modindices(uli, sort. = TRUE)
mio
mi$mi
mi
head(mi)
newModel <- 'HelpsSeekingBehavior =~ V1 + V3 + V6 + V9;
ProblemFocusedCoping =~ V2 + V4 + V8 + V10;
EmotionFocusedCoping =~ V5 + V7;
HelpsSeekingBehavior ~~ ProblemFocusedCoping;
HelpsSeekingBehavior ~~ EmotionFocusedCoping;
ProblemFocusedCoping ~~ EmotionFocusedCoping;
V1~~V6;
V3~~V9'
uliNew <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, std.lv=FALSE)
uliNewSummary <- summary(uliNew, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
newModel <- 'HelpsSeekingBehavior =~ V1 + V3 + V6 + V9;
ProblemFocusedCoping =~ V2 + V4 + V8 + V10;
EmotionFocusedCoping =~ V5 + V7;
HelpsSeekingBehavior ~~ ProblemFocusedCoping;
HelpsSeekingBehavior ~~ EmotionFocusedCoping;
ProblemFocusedCoping ~~ EmotionFocusedCoping;
V1~~V6;
V3~~V9'
uliNew <- lavaan(newModel, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, std.lv=FALSE)
uliNewSummary <- summary(uliNew, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
newModel <- 'HelpsSeekingBehavior =~ V1 + V3 + V6 + V9;
ProblemFocusedCoping =~ V2 + V4 + V8 + V10;
EmotionFocusedCoping =~ V5 + V7;
HelpsSeekingBehavior ~~ ProblemFocusedCoping;
HelpsSeekingBehavior ~~ EmotionFocusedCoping;
ProblemFocusedCoping ~~ EmotionFocusedCoping;
V1~~V6'
uliNew <- lavaan(newModel, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, std.lv=FALSE)
uliNewSummary <- summary(uliNew, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
newModel <- 'HelpsSeekingBehavior =~ V1 + V3 + V6 + V9;
ProblemFocusedCoping =~ V2 + V4 + V8 + V10;
EmotionFocusedCoping =~ V5 + V7;
HelpsSeekingBehavior ~~ ProblemFocusedCoping;
HelpsSeekingBehavior ~~ EmotionFocusedCoping;
ProblemFocusedCoping ~~ EmotionFocusedCoping;
V1~~V6;
V3~~V9'
uliNew <- lavaan(newModel, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, std.lv=FALSE)
uliNewSummary <- summary(uliNew, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
install.packages("lmtest")
lmtest::lrtest(uli, newModel)
lmtest::lrtest(uli, uliNew)
hihi = lmtest::lrtest(uli, uliNew)
uliNewSummary$FIT
summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
intersaction <- combined[duplicated(combined), -std.nox, drop = FALSE]
intersaction <- combined[duplicated(combined), -"std.nox", drop = FALSE]
intersaction[,-"std.nox"]
intersaction[,-c("std.nox")]
uli <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, std.lv=FALSE)
uliSummary <- summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uvi <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=FALSE, std.lv=TRUE)
uviSummary <- summary(uvi, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uviSummary["PE"]
class(uviSummary$PE)
uviSummary$PE[,-"std.nox"]
uviSummary$PE[,-c("std.nox")]
uviSummary$PE[,-10]
intersaction[,-which(names(intersaction) == "std.nox")]
uliSummary$PE[!tail,[,-which(names(uliSummary) == "std.nox")]]
uliSummary$PE[!tail,-which(names(intersaction) == "std.nox")]]
uliSummary$PE[!tail,-which(names(intersaction) == "std.nox")]
mi <- modindices(uli, sort. = TRUE)
head(mi)
head(mi)[,-which(names(mi) == "sepc.nox")]
uviSummary$PE[!tail,-which(names(uviSummary) == "std.nox")]
uliSummary$PE[!tail,-which(names(uliSummary) == "std.nox")]
col
uliSummary$PE[!tail,-which(colnames(uliSummary) == "std.nox")]
colnames(uliSummary)
uliSummary
uliSummary$PE[!tail,-which(colnames(uliSummary$PE) == "std.nox")]
uviSummary$PE[!tail,-which(names(uviSummary$PE) == "std.nox")]
newModel <- 'HelpsSeekingBehavior =~ V1 + V3 + V6 + V9;
ProblemFocusedCoping =~ V2 + V4 + V8 + V10;
EmotionFocusedCoping =~ V5 + V7;
HelpsSeekingBehavior ~~ ProblemFocusedCoping;
HelpsSeekingBehavior ~~ EmotionFocusedCoping;
ProblemFocusedCoping ~~ EmotionFocusedCoping;
V1~~V6'
uliNew <- lavaan(newModel, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, std.lv=FALSE)
uliNewSummary <- summary(uliNew, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
mi2 <- modindices(uliNew1, sort. = TRUE)
head(mi2)
mi2 <- modindices(uliNew1, sort. = TRUE)
pcaCharts <- function(x) {
x.var <- x$sdev ^ 2
x.pvar <- x.var/sum(x.var)
print("proportions of variance:")
print(x.pvar)
par(mfrow=c(2,2))
plot(x.pvar,xlab="Principal component",
ylab="Proportion of variance explained", ylim=c(0,1), type='b')
plot(cumsum(x.pvar),xlab="Principal component",
ylab="Cumulative Proportion of variance explained", ylim=c(0,1), type='b')
screeplot(x)
screeplot(x,type="l")
par(mfrow=c(1,1))
}
cor.mtest <- function(data, ...) {
data <- as.matrix(data)
n <- ncol(data)
p.data<- matrix(NA, n, n)
diag(p.data) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(data[, i], data[, j], ...)
p.data[i, j] <- p.data[j, i] <- tmp$p.value
}
}
colnames(p.data) <- rownames(p.data) <- colnames(data)
p.data
}
library("knitr")
opts_chunk$set(echo = TRUE, cache = TRUE, message = FALSE, warning = FALSE)
options(width = 100)
library("psych")
library("lavaan")
# import data
teachers <- read.csv('hw4(2020).dat', header = FALSE, sep = '')
model <- 'HelpsSeekingBehavior =~ V1 + V3 + V6 + V9;
ProblemFocusedCoping =~ V2 + V4 + V8 + V10;
EmotionFocusedCoping =~ V5 + V7;
HelpsSeekingBehavior ~~ ProblemFocusedCoping;
HelpsSeekingBehavior ~~ EmotionFocusedCoping;
ProblemFocusedCoping ~~ EmotionFocusedCoping'
fit <- cfa(model, data = teachers)
semPlot::semPaths(object=fit, intercepts=FALSE, what="path", whatLabels="cons")
n_variable <- 10
n_factor <- 3
p_star <- (n_variable * (n_variable+1))/2
q <- n_variable + (n_variable - n_factor) + (n_factor * (n_factor+1))/2
df <- p_star - q
uli <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, std.lv=FALSE)
uliSummary <- summary(uli, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
uvi <- lavaan(model, data=teachers, auto.var=TRUE, auto.fix.first=FALSE, std.lv=TRUE)
uviSummary <- summary(uvi, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
# row numbers of fixed parameters in parameter table
uliFixedParameters <- c(1,5,9)
uviFixedParameters <- c(24,25,26)
# round numbers to 3 decimal places
uliSummary$PE[,-c(1:3)] <- round(uliSummary$PE[,-c(1:3)],3)
uviSummary$PE[,-c(1:3)] <- round(uviSummary$PE[,-c(1:3)],3)
# compare all paremeters except fixed parameters
combined <- rbind(uliSummary$PE, uviSummary$PE)
intersaction <- combined[duplicated(combined), , drop = FALSE]
intersaction[,-which(names(intersaction) == "std.nox")]
nRowTable <- dim(uviSummary$PE)[1]
tail <- tail(duplicated(combined), nRowTable)
uliSummary$PE[!tail,-which(colnames(uliSummary$PE) == "std.nox")]
uviSummary$PE[!tail,-which(names(uviSummary$PE) == "std.nox")]
identical(round(uliSummary$FIT, 3), round(uviSummary$FIT, 3))
uliSummary$FIT
mi1 <- modindices(uli, sort. = TRUE)
head(mi1)[,-which(names(mi1) == "sepc.nox")]
newModel1 <- 'HelpsSeekingBehavior =~ V1 + V3 + V6 + V9;
ProblemFocusedCoping =~ V2 + V4 + V8 + V10;
EmotionFocusedCoping =~ V5 + V7;
HelpsSeekingBehavior ~~ ProblemFocusedCoping;
HelpsSeekingBehavior ~~ EmotionFocusedCoping;
ProblemFocusedCoping ~~ EmotionFocusedCoping;
V1~~V6'
uliNew1 <- lavaan(newModel1, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, std.lv=FALSE)
uliNew1Summary <- summary(uliNew1, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
lmtest::lrtest(uli, uliNew1)
mi2 <- modindices(uliNew1, sort. = TRUE)
head(mi2)
head(mi2, 1)
head(mi1, 2)[,-which(names(mi1) == "sepc.nox")]
pchisq(.95, lower.tail = 0)
pchisq(.95, lower.tail = 0, df = 31)
9chisq(.05, lower.tail = 0, df = 31)
qchisq(.05, lower.tail = 0, df = 31)
head(mi2, 5)
uliNew1Summary$FIT["chisq"]
uliSummary$FIT["chisq"] - 56.721
head(mi2, 3)
head(mi2, 3)[,-which(names(mi2) == "std.nox")]
head(mi2, 3)[,-which(colnames(mi2) == "std.nox")]
mi2$colnames(mi2)
colnames(mi2)
head(mi2, 3)[,-which(colnames(mi2) == "sepc.nox")]
mi2$mi[1]
newModel1 <- 'HelpsSeekingBehavior =~ V1 + V3 + V6 + V9;
ProblemFocusedCoping =~ V2 + V4 + V8 + V10;
EmotionFocusedCoping =~ V5 + V7;
HelpsSeekingBehavior ~~ ProblemFocusedCoping;
HelpsSeekingBehavior ~~ EmotionFocusedCoping;
ProblemFocusedCoping ~~ EmotionFocusedCoping;
V1~~V6;V10~~V5'
uliNew1 <- lavaan(newModel1, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, std.lv=FALSE)
uliNew1Summary <- summary(uliNew1, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
mi2 <- modindices(uliNew1, sort. = TRUE)
head(mi2, 3)[,-which(colnames(mi2) == "sepc.nox")]
newModel1 <- 'HelpsSeekingBehavior =~ V1 + V3 + V6 + V9;
ProblemFocusedCoping =~ V2 + V4 + V8 + V10;
EmotionFocusedCoping =~ V5 + V7;
HelpsSeekingBehavior ~~ ProblemFocusedCoping;
HelpsSeekingBehavior ~~ EmotionFocusedCoping;
ProblemFocusedCoping ~~ EmotionFocusedCoping;
V1~~V6'
uliNew1 <- lavaan(newModel1, data=teachers, auto.var=TRUE, auto.fix.first=TRUE, std.lv=FALSE)
uliNew1Summary <- summary(uliNew1, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
mi2 <- modindices(uliNew1, sort. = TRUE)
head(mi2, 3)[,-which(colnames(mi2) == "sepc.nox")]
qchisq(.95, 30)
uliNew1Summary$FIT["df"]
round(mi2$mi[1], 3)
identical(uliSummary$FIT, uviSummary$FIT)
#lmtest::lrtest(uli, uliNew1)
lavTestLRT(uli, uliNew1)
qchisq(.95,1)
qchisq(.05,1)
qchisq(.05,1, lower.tail = 0)
pchisq(73.84, 1)
pchisq(73.84, 1, lower.tail = 0)
uliNew1Summary$PE
uliNew1Summary$PE
uliNew1Summary$PE[,-which(names(uliNew1Summary) == "std.nox")]
uliNew1Summary$PE[,-which(names(uliNew1Summary) == "std.nox")]
uliNew1Summary$PE[,-which(names(uliNew1Summary) == "std.nox")]
uliNew1Summary$PE[,-which(colnames(uliNew1Summary) == "std.nox")]
which(colnames(uliNew1Summary) == "std.nox")
colnames(uliNew1Summary)
colnames(uliNew1Summary$PE)
uliNew1Summary$PE[,-which(colnames(uliNew1Summary$PE) == "std.nox")]
