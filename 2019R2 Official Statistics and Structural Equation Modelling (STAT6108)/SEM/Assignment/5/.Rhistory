parameterEstimates(base_model, remove.eq = 0)
modelcon <- "
#measurment model
Motivation =~ V1 + V2;
JobCommitment =~ V3 + V4;
JobSatisfaction =~ V5 + V6 + V7;
#structural model
JobCommitment ~ gamma_11  * Motivation;
JobSatisfaction ~ beta_11 * JobCommitment + gamma_21 * Motivation;
#factor (co)variance
Motivation ~~ psi_11 * Motivation
JobCommitment ~~ JobCommitment
JobSatisfaction ~~ JobSatisfaction
#error variance
V1 ~~ V1
V2 ~~ V2
V3 ~~ V3
V4 ~~ V4
V5 ~~ V5
V6 ~~ V6
V7 ~~ V7
#compare effect among groups
direct := gamma_21;
indirect := gamma_11 * beta_11;
"
syntax.config <- measEq.syntax(configural.model = modelcon,
sample.cov = list(female = female_cov, male = male_cov),
sample.nobs = list(n_female, n_male),
ID.fac = "auto.fix.first",
return.fit = TRUE)
parametertable(syntax.config)
parTable(syntax.config)
syntax.config <- lavaan(configural.model = modelcon,
sample.cov = list(female = female_cov, male = male_cov),
sample.nobs = list(n_female, n_male),
ID.fac = "auto.fix.first",
return.fit = TRUE)
syntax.config <- lavaan(model = modelcon,
sample.cov = list(female = female_cov, male = male_cov),
sample.nobs = list(n_female, n_male),
auto.var=FALSE,
auto.fix.first=TRUE)
parameterestimates(syntax.config)
syntax.config <- measEq.syntax(configural.model = syntax.config,
ID.fac = "auto.fix.first",
return.fit = TRUE)
parameterestimates(syntax.config)
parameterEstimates(syntax.config)
parameterEstimates(base_model)
syntax.config <- measEq.syntax(configural.model = base_model,
ID.fac = "auto.fix.first",
return.fit = TRUE)
syntax.loadings <- measEq.syntax(configural.model = base_model,
ID.fac = "auto.fix.first",
group.equal = "loadings",
return.fit = TRUE)
lavTestLRT(base_model, syntax.loadings)
li_test <- lavTestLRT(base_model, invariance_loadings)
invariance_loadings <- measEq.syntax(configural.model = base_model,
ID.fac = "auto.fix.first",
group.equal = "loadings",
return.fit = TRUE)
li_test <- compareFit(base_model, invariance_loadings)
li_test
fitMeasures(invariance_loadings,
fit.measures = c("chisq", "pvalue", "tli", "cfi", "rmsea", "srmr"))
fitMeasures(invariance_loadings)
para_invar <- parameterEstimates(invariance_loadings)
para_invar
li_test[["Pr(>Chisq)"]][2]
li_test
class(li_test)
li_test <- lavTestLRT(base_model, invariance_loadings)
li_test
fits_invar["pvalue"]
fits_invar
filter(para_invar, label == "var_diff") %>% select(.,  pvalue)
filter(para_invar, label == "var_diff")
para_invar
invariance_loadings <- measEq.syntax(configural.model = base_model,
ID.fac = "auto.fix.first",
group.equal = "loadings",
sample.cov = list(female = female_cov, male = male_cov),
sample.nobs = list(n_female, n_male),
return.fit = TRUE)
li_test <- lavTestLRT(base_model, invariance_loadings)
li_test
para_invar
invariance_loadings <- measEq.syntax(configural.model = para_base,
ID.fac = "auto.fix.first",
group.equal = "loadings",
return.fit = TRUE)
parameterTable(base_model)
invariance_loadings <- measEq.syntax(configural.model = parameterTable(base_model),
ID.fac = "auto.fix.first",
group.equal = "loadings",
return.fit = TRUE)
invariance_loadings <- measEq.syntax(configural.model = parTable(base_model),
ID.fac = "auto.fix.first",
group.equal = "loadings",
return.fit = TRUE)
invariance_loadings
parameterEstimates(invariance_loadings)
invariance_loadings <- measEq.syntax(configural.model = base_model,
ID.fac = "auto.fix.first",
group.equal = "loadings",
group.partial = direct,
return.fit = TRUE)
invariance_loadings <- measEq.syntax(configural.model = base_model,
ID.fac = "auto.fix.first",
group.equal = "loadings",
group.partial = "direct",
return.fit = TRUE)
fits_invar
invariance_loadings <- lavaan(model = base_model,
ID.fac = "auto.fix.first",
group.equal = "loadings",
return.fit = TRUE)
invariance <- semTools::measurementInvariance(model = model,
sample.cov = list(female = female_cov, male = male_cov),
sample.nobs = list(n_female, n_male), auto.var=TRUE,
auto.fix.first=TRUE,
meanstructure = TRUE)
r
semTools::measurementInvariance(model = model,
sample.cov = list(female = female_cov, male = male_cov),
sample.nobs = list(n_female, n_male), auto.var=TRUE,
auto.fix.first=TRUE,
meanstructure = TRUE)
invariance <- semTools::measurementInvariance(model = model,
sample.cov = list(female = female_cov, male = male_cov),
sample.nobs = list(n_female, n_male), auto.var=TRUE,
auto.fix.first=TRUE,
meanstructure = TRUE)
fits_invar <- fitMeasures(invariance$fit.loadings)
fitMeasures(invariance$fit.loadings)
invariance$fit.loadings
class(invariance$fit.loadings)
base_syntax <- measEq.syntax(configural.model = model,
sample.cov = sample.cov,
sample.nobs = sample.nobs,
auto.var = TRUE,
ID.fac = "auto.fix.first")
n_female <- 201
n_male <- 204
model <- "
# measurment model
Motivation =~ V1 + V2;
JobCommitment =~ V3 + V4;
JobSatisfaction =~ V5 + V6 + V7;
# structural model
JobCommitment ~  Motivation;
JobSatisfaction ~ JobCommitment +  Motivation;
"
sample.cov <- list(female = female_cov, male = male_cov)
sample.nobs <-  list(n_female, n_male)
base_syntax <- measEq.syntax(configural.model = model,
sample.cov = sample.cov,
sample.nobs = sample.nobs,
auto.var = TRUE,
ID.fac = "auto.fix.first")
# self defined parameters
indirect_female <- "indirect_female := beta.2_1.g1 * beta.3_2.g1"
indirect_male <- "indirect_male := beta.2_1.g2 * beta.3_2.g2"
base_syntax@constraints <- c(base_syntax@constraints, indirect_female, indirect_male)
base_syntax@labels
base_syntax <- measEq.syntax(configural.model = model,
sample.cov = sample.cov,
sample.nobs = sample.nobs,
auto.var = TRUE,
ID.fac = "auto.fix.first")
# self defined parameters
indirect_female <- "indirect_female := beta.2_1.g1 * beta.3_2.g1"
indirect_male <- "indirect_male := beta.2_1.g2 * beta.3_2.g2"
base_syntax@constraints <- c(base_syntax@constraints, indirect_female, indirect_male)
# train model
base_model <- lavaan(model = as.character(base_syntax),
sample.cov = sample.cov,
sample.nobs = sample.nobs)
# goodness-of-fit measures and parameter estimates
fits_base <- fitMeasures(base_model,
fit.measures = c("chisq", "pvalue", "tli", "cfi", "rmsea", "srmr"))
para_base <- parameterEstimates(base_model)
para_base
fits_base["chisq"]
summary(base_model)
lavInspect(base_model, "test")$standard$stat.group[2]
fits_base["srmr"]
# train model
base_model <- lavaan(model = as.character(base_syntax))
# train model
base_model <- lavaan(model = as.character(base_syntax),
sample.cov = sample.cov)
base_syntax
summary(base_syntax)
base_syntax <- measEq.syntax(configural.model = model,
ID.fac = "auto.fix.first")
# self defined parameters
indirect_female <- "indirect_female := beta.2_1.g1 * beta.3_2.g1"
indirect_male <- "indirect_male := beta.2_1.g2 * beta.3_2.g2"
base_syntax@constraints <- c(base_syntax@constraints, indirect_female, indirect_male)
# train model
base_model <- lavaan(model = as.character(base_syntax),
sample.cov = sample.cov,
sample.nobs = sample.nobs)
invariance_syntax
invariance_syntax <- measEq.syntax(configural.model = base_model,
sample.cov = sample.cov,
sample.nobs = sample.nobs,
ID.fac = "auto.fix.first",
group.equal = "loadings")
# self defined parameters
variance_diff <- "variance_diff := psi.1_1.g1 - psi.1_1.g2"
direct_diff <- "direct_diff := beta.3_1.g1 - beta.3_1.g2"
indirect_diff <- "indirect_diff := indirect_female - indirect_male"
invariance_syntax@constraints <- c(base_syntax@constraints,
variance_diff,
direct_diff,
indirect_diff)
# train model
invariance_model <- lavaan(model = as.character(invariance_syntax),
sample.cov = sample.cov,
sample.nobs = sample.nobs)
# goodness-of-fit measures and parameter estimates
fits_invar <- fitMeasures(invariance_model,
fit.measures = c("chisq", "pvalue", "tli", "cfi", "rmsea", "srmr"))
para_invar <- parameterEstimates(invariance_model)
invariance_syntax
summary(invariance_syntax)
para_invar
li_test@nested
li_test
li_test["invariance_model",Pr(>Chisq)]
li_test
li_test[["Pr(>Chisq)"]]
which(row.names(li_test) == "invariance_loadings")
li_test[["Pr(>Chisq)"]][which(row.names(li_test) == "invariance_loadings")]
class(li_test)
class(li_test[2])
class(li_test[[2])
class(li_test[[2]])
li_test[[2]]
li_test[["Pr(>Chisq)"]]
li_test <- as.data.frame(li_test)
li_test
li_test <- compareFit(base_model, invariance_model)
library("knitr")
opts_chunk$set(echo = TRUE, cache = TRUE, message = FALSE, warning = FALSE)
options(width = 100)
library("psych")
library("lavaan")
library("semTools")
library("dplyr")
knitr::knit_hooks$set(inline = function(x) {
x <- sprintf("%1.3f", x)
paste(x, collapse = ", ")
})
# import data
female_cov <- getCov(scan('hw5_female(2020).cov'))
male_cov <- getCov(scan('hw5_male(2020).cov'))
n_female <- 201
n_male <- 204
model <- "
# measurment model
Motivation =~ V1 + V2;
JobCommitment =~ V3 + V4;
JobSatisfaction =~ V5 + V6 + V7;
# structural model
JobCommitment ~  Motivation;
JobSatisfaction ~ JobCommitment +  Motivation;
"
sample.cov <- list(female = female_cov, male = male_cov)
sample.nobs <-  list(n_female, n_male)
base_syntax <- measEq.syntax(configural.model = model,
sample.cov = sample.cov,
sample.nobs = sample.nobs,
auto.var = TRUE,
ID.fac = "auto.fix.first")
# self defined parameters
indirect_female <- "indirect_female := beta.2_1.g1 * beta.3_2.g1"
indirect_male <- "indirect_male := beta.2_1.g2 * beta.3_2.g2"
base_syntax@constraints <- c(base_syntax@constraints, indirect_female, indirect_male)
# train model
base_model <- lavaan(model = as.character(base_syntax),
sample.cov = sample.cov,
sample.nobs = sample.nobs)
# goodness-of-fit measures and parameter estimates
fits_base <- fitMeasures(base_model,
fit.measures = c("chisq", "pvalue", "tli", "cfi", "rmsea", "srmr"))
para_base <- parameterEstimates(base_model)
invariance_syntax <- measEq.syntax(configural.model = base_model,
sample.cov = sample.cov,
sample.nobs = sample.nobs,
ID.fac = "auto.fix.first",
group.equal = "loadings")
# self defined parameters
variance_diff <- "variance_diff := psi.1_1.g1 - psi.1_1.g2"
direct_diff <- "direct_diff := beta.3_1.g1 - beta.3_1.g2"
indirect_diff <- "indirect_diff := indirect_female - indirect_male"
invariance_syntax@constraints <- c(base_syntax@constraints,
variance_diff,
direct_diff,
indirect_diff)
# train model
invariance_model <- lavaan(model = as.character(invariance_syntax),
sample.cov = sample.cov,
sample.nobs = sample.nobs)
# goodness-of-fit measures and parameter estimates
fits_invar <- fitMeasures(invariance_model,
fit.measures = c("chisq", "pvalue", "tli", "cfi", "rmsea", "srmr"))
para_invar <- parameterEstimates(invariance_model)
li_test <- compareFit(base_model, invariance_model)
li_test
li_test@nested
li_test$nested
as.data.frame(li_test@nested)
library("knitr")
opts_chunk$set(echo = TRUE, cache = TRUE, message = FALSE, warning = FALSE)
options(width = 100)
library("psych")
library("lavaan")
library("semTools")
library("dplyr")
knitr::knit_hooks$set(inline = function(x) {
x <- sprintf("%1.3f", x)
paste(x, collapse = ", ")
})
# import data
female_cov <- getCov(scan('hw5_female(2020).cov'))
male_cov <- getCov(scan('hw5_male(2020).cov'))
n_female <- 201
n_male <- 204
model <- "
# measurment model
Motivation =~ V1 + V2;
JobCommitment =~ V3 + V4;
JobSatisfaction =~ V5 + V6 + V7;
# structural model
JobCommitment ~  Motivation;
JobSatisfaction ~ JobCommitment +  Motivation;
"
sample.cov <- list(female = female_cov, male = male_cov)
sample.nobs <-  list(n_female, n_male)
base_syntax <- measEq.syntax(configural.model = model,
sample.cov = sample.cov,
sample.nobs = sample.nobs,
auto.var = TRUE,
ID.fac = "auto.fix.first")
# self defined parameters
indirect_female <- "indirect_female := beta.2_1.g1 * beta.3_2.g1"
indirect_male <- "indirect_male := beta.2_1.g2 * beta.3_2.g2"
base_syntax@constraints <- c(base_syntax@constraints, indirect_female, indirect_male)
# train model
base_model <- lavaan(model = as.character(base_syntax),
sample.cov = sample.cov,
sample.nobs = sample.nobs)
# goodness-of-fit measures and parameter estimates
fits_base <- fitMeasures(base_model,
fit.measures = c("chisq", "pvalue", "tli", "cfi", "rmsea", "srmr"))
para_base <- parameterEstimates(base_model)
invariance_syntax <- measEq.syntax(configural.model = base_model,
sample.cov = sample.cov,
sample.nobs = sample.nobs,
ID.fac = "auto.fix.first",
group.equal = "loadings")
# self defined parameters
variance_diff <- "variance_diff := psi.1_1.g1 - psi.1_1.g2"
direct_diff <- "direct_diff := beta.3_1.g1 - beta.3_1.g2"
indirect_diff <- "indirect_diff := indirect_female - indirect_male"
invariance_syntax@constraints <- c(base_syntax@constraints,
variance_diff,
direct_diff,
indirect_diff)
# train model
invariance_model <- lavaan(model = as.character(invariance_syntax),
sample.cov = sample.cov,
sample.nobs = sample.nobs)
# goodness-of-fit measures and parameter estimates
fits_invar <- fitMeasures(invariance_model,
fit.measures = c("chisq", "pvalue", "tli", "cfi", "rmsea", "srmr"))
para_invar <- parameterEstimates(invariance_model)
li_test <- compareFit(base_model, invariance_model)
li_test
li_test <- as.data.frame(li_test@nested)
lavInspect(base_model, "test")
lavInspect(base_model)
li_test[["Pr(>Chisq)"]][which(row.names(li_test) == "invariance_loadings")]
li_test
which(row.names(li_test) == "invariance_loadings")
li_test
sumamry(invariance_model)
summary(invariance_model)
parameterEstimates(invariance_model)
parameterEstimates(base_model)
0.596-1.043
library("knitr")
opts_chunk$set(echo = TRUE, cache = TRUE, message = FALSE, warning = FALSE)
options(width = 100)
library("lavaan")
library("semTools")
library("dplyr")
knitr::knit_hooks$set(inline = function(x) {
x <- sprintf("%1.3f", x)
paste(x, collapse = ", ")
})
# import data
female_cov <- getCov(scan('hw5_female(2020).cov'))
male_cov <- getCov(scan('hw5_male(2020).cov'))
n_female <- 201
n_male <- 204
sample.cov <- list(female = female_cov, male = male_cov)
sample.nobs <-  list(n_female, n_male)
model <- "
# measurment model
Motivation =~ V1 + V2;
JobCommitment =~ V3 + V4;
JobSatisfaction =~ V5 + V6 + V7;
# structural model
JobCommitment ~  Motivation;
JobSatisfaction ~ JobCommitment +  Motivation;
"
base_syntax <- measEq.syntax(configural.model = model,
sample.cov = sample.cov,
sample.nobs = sample.nobs,
auto.var = TRUE,
ID.fac = "auto.fix.first")
# user-defined parameters
indirect_female <- "indirect_female := beta.2_1.g1 * beta.3_2.g1"
indirect_male <- "indirect_male := beta.2_1.g2 * beta.3_2.g2"
# add user-defined parameters to the @constraints slot
base_syntax@constraints <- c(base_syntax@constraints, indirect_female, indirect_male)
# train model
base_model <- lavaan(model = as.character(base_syntax),
sample.cov = sample.cov,
sample.nobs = sample.nobs)
# goodness-of-fit measures and parameter estimates
fits_base <- fitMeasures(base_model,
fit.measures = c("chisq", "pvalue", "tli", "cfi", "rmsea", "srmr"))
para_base <- parameterEstimates(base_model)
invariance_syntax <- measEq.syntax(configural.model = base_model,
sample.cov = sample.cov,
sample.nobs = sample.nobs,
ID.fac = "auto.fix.first",
group.equal = "loadings") # fix factor loadings
# user-defined parameters
variance_diff <- "variance_diff := psi.1_1.g1 - psi.1_1.g2"
direct_diff <- "direct_diff := beta.3_1.g1 - beta.3_1.g2"
indirect_diff <- "indirect_diff := indirect_female - indirect_male"
# add user-defined parameters to the @constraints slot
invariance_syntax@constraints <- c(base_syntax@constraints,
variance_diff,
direct_diff,
indirect_diff)
# train model
invariance_model <- lavaan(model = as.character(invariance_syntax),
sample.cov = sample.cov,
sample.nobs = sample.nobs)
# goodness-of-fit measures and parameter estimates
fits_invar <- fitMeasures(invariance_model,
fit.measures = c("chisq", "pvalue", "tli", "cfi", "rmsea", "srmr"))
para_invar <- parameterEstimates(invariance_model)
li_test <- compareFit(base_model, invariance_model)
li_test
li_test <- as.data.frame(li_test@nested)
para_invar
.05/2
filter(para_invar, label == "variance_diff") %>% select(.,  est)
invariance_syntax <- measEq.syntax(configural.model = base_model,
sample.cov = sample.cov,
sample.nobs = sample.nobs,
ID.fac = "auto.fix.first",
group.equal = "loadings") # fix factor loadings
# user-defined parameters
variance_diff <- "variance_diff := psi.1_1.g1 - psi.1_1.g2"
direct_diff <- "direct_diff := beta.3_1.g2 - beta.3_1.g1"
indirect_diff <- "indirect_diff := indirect_female - indirect_male"
# add user-defined parameters to the @constraints slot
invariance_syntax@constraints <- c(base_syntax@constraints,
variance_diff,
direct_diff,
indirect_diff)
# train model
invariance_model <- lavaan(model = as.character(invariance_syntax),
sample.cov = sample.cov,
sample.nobs = sample.nobs)
# goodness-of-fit measures and parameter estimates
fits_invar <- fitMeasures(invariance_model,
fit.measures = c("chisq", "pvalue", "tli", "cfi", "rmsea", "srmr"))
para_invar <- parameterEstimates(invariance_model)
para_invar
variance_diff <- "variance_diff := psi.1_1.g2 - psi.1_1.g1"
direct_diff <- "direct_diff := beta.3_1.g1 - beta.3_1.g2"
indirect_diff <- "indirect_diff := indirect_female - indirect_male"
# add user-defined parameters to the @constraints slot
invariance_syntax@constraints <- c(base_syntax@constraints,
variance_diff,
direct_diff,
indirect_diff)
# train model
invariance_model <- lavaan(model = as.character(invariance_syntax),
sample.cov = sample.cov,
sample.nobs = sample.nobs)
# goodness-of-fit measures and parameter estimates
fits_invar <- fitMeasures(invariance_model,
fit.measures = c("chisq", "pvalue", "tli", "cfi", "rmsea", "srmr"))
para_invar <- parameterEstimates(invariance_model)
para_invar
qnorm(.95, lower.tail = 1)
lavTestWald(invariance_model, constraints = "psi.1_1.g2 == psi.1_1.g1")
lavTestWald(invariance_model, constraints = "psi.1_1.g2 <= psi.1_1.g1")
lavTestWald(invariance_model, constraints = "psi.1_1.g2 < psi.1_1.g1")
lavTestWald(invariance_model, constraints = "variance_diff == 0")
