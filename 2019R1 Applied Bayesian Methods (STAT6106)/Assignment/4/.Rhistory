c4 <- c4_target(c4_xy[,1], c4_xy[,2])
#summary of target samples
c4_mean <- mean(c4)
c4_var <- var(c4)
min(c4_xy[,1])
min(c4_xy[,2])
min(c3_xy[,1])
min(c3_xy[,2])
c3_target = function(x, y) exp(-(x^3+x*y+y^2))
c3_target_log_x = function(x, y) -(x^3+x*y)
c3_target_log_y = function(x, y) -(x*y+y^2)
c3_xy = xy
sd <- 5
for(i in 2:n)
{
currentx <- c3_xy[i - 1, 1]
currenty <- c3_xy[i - 1, 2]
#MH for x|y[i-1]
proposedx <- rnorm(1, currentx, sd)
#check if proposed x is outside boundry
if (proposedx <= 0) {
c3_xy[i,1] <- currentx
} else {
log_A <- c3_target_log_x(proposedx, currenty) - c3_target_log_x(currentx, currenty)
#proposal ratio of truncated normal
c <-  dtnorm(x = currentx, mean = proposedx, sd = sd, lower = 0) /
dtnorm(x = proposedx, mean = currentx, sd = sd, lower = 0)
A <- exp(log_A) * c
c3_xy[i,1] <- ifelse(runif(1) < A, proposedx, currentx)
}
#MH for y|x[i]
current_x <- c3_xy[i, 1]
proposedy <- rnorm(1, currenty, sd)
log_A <- c3_target_log_y(current_x, proposedy) - c3_target_log_y(current_x, currenty)
A <- exp(log_A)
c3_xy[i,2] <- ifelse(runif(1) < A, proposedy, currenty)
}
qplot(c3_xy[,1], c3_xy[,2], geom="line", main = "2-D trace plot")
#remove burning
c3_xy <- c3_xy[-(1:burnin),]
#graphs
c3x_hist <- qplot(x = c3_xy[,1], y =..density.., geom="histogram", bins = 25, fill=I("grey"),  col=I("black"), xlab = "x", ylab = "Density")
c3x_acf <- ggAcf(c3_xy[,1], main = "x ACF")
c3y_hist <- qplot(x = c3_xy[,2], y =..density.., geom="histogram", bins = 25, fill=I("grey"),  col=I("black"), xlab = "y", ylab = "Density")
c3y_acf <- ggAcf(c3_xy[,2], main = "y ACF")
gridExtra::grid.arrange(grobs = list(c3x_hist, c3x_acf, c3y_hist, c3y_acf), nrow=4)
# plug x, y samples into target function
c3 <- c3_target(c3_xy[,1], c3_xy[,2])
#summary of target samples
c3_mean <- mean(c3)
c3_var <- var(c3)
library("knitr");
opts_chunk$set(echo = TRUE, results = TRUE , cache=TRUE, message=FALSE, warning = FALSE);
options(width = 100);
library("ggplot2");
library("dplyr");
library("forecast")
library(gridExtra)
library(rgl);
library("knitr");
opts_chunk$set(echo = TRUE, results = TRUE , cache=TRUE, message=FALSE, warning = FALSE);
options(width = 100);
library("ggplot2");
library("dplyr");
library("forecast")
library(gridExtra)
library(rgl);
dtnorm <- function(x, mean = 0, sd = 1, lower = -Inf, upper = Inf, log = FALSE) {
ret <- numeric(length(x))
ret[x <= lower | x >= upper] <- if (log) {
-Inf
} else {
0
}
ret[upper < lower] <- NaN
ind <- x > lower & x < upper
if (any(ind)) {
denom <- pnorm(upper, mean, sd) - pnorm(
lower, mean,
sd
)
xtmp <- dnorm(x, mean, sd, log)
if (log) {
xtmp <- xtmp - log(denom)
} else {
xtmp <- xtmp / denom
}
ret[x >= lower & x <= upper] <- xtmp[ind]
}
ret
}
n <- 10e4
burnin <- n / 2
x <- rep(NA,n)
x[1] <- 1
xy <- matrix(data = rep(NA, n), nrow = n, ncol = 2)
xy[1,] <- c(10,10)
c3_target = function(x, y) exp(-(x^3+x*y+y^2))
c3_target_log_x = function(x, y) -(x^3+x*y)
c3_target_log_y = function(x, y) -(x*y+y^2)
c3_xy = xy
sd <- 5
for(i in 2:n)
{
currentx <- c3_xy[i - 1, 1]
currenty <- c3_xy[i - 1, 2]
#MH for x|y[i-1]
proposedx <- rnorm(1, currentx, sd)
log_A <- c3_target_log_x(proposedx, currenty) - c3_target_log_x(currentx, currenty)
#proposal ratio of truncated normal
c <-  dtnorm(x = currentx, mean = proposedx, sd = sd, lower = 0) /
dtnorm(x = proposedx, mean = currentx, sd = sd, lower = 0)
A <- exp(log_A) * c
c3_xy[i,1] <- ifelse(runif(1) < A, proposedx, currentx)
#MH for y|x[i]
current_x <- c3_xy[i, 1]
proposedy <- rnorm(1, currenty, sd)
log_A <- c3_target_log_y(current_x, proposedy) - c3_target_log_y(current_x, currenty)
A <- exp(log_A)
c3_xy[i,2] <- ifelse(runif(1) < A, proposedy, currenty)
}
c3_target = function(x, y) exp(-(x^3+x*y+y^2))
c3_target_log_x = function(x, y) -(x^3+x*y)
c3_target_log_y = function(x, y) -(x*y+y^2)
c3_xy = xy
sd <- 5
for(i in 2:n)
{
currentx <- c3_xy[i - 1, 1]
currenty <- c3_xy[i - 1, 2]
#MH for x|y[i-1]
proposedx <- rnorm(1, currentx, sd)
log_A <- c3_target_log_x(proposedx, currenty) - c3_target_log_x(currentx, currenty)
#proposal ratio of truncated normal
c <-  dtnorm(x = currentx, mean = proposedx, sd = sd, lower = 0) /
dtnorm(x = proposedx, mean = currentx, sd = sd, lower = 0)
A <- exp(log_A) * c
c3_xy[i,1] <- ifelse(runif(1) < A, proposedx, currentx)
#MH for y|x[i]
current_x <- c3_xy[i, 1]
proposedy <- rnorm(1, currenty, sd)
log_A <- c3_target_log_y(current_x, proposedy) - c3_target_log_y(current_x, currenty)
A <- exp(log_A)
c3_xy[i,2] <- ifelse(runif(1) < A, proposedy, currenty)
}
dtnorm <- function(x, mean = 0, sd = 1, lower = -Inf, upper = Inf, log = FALSE) {
ret <- numeric(length(x))
ret[x <= lower | x >= upper] <- if (log) {
-Inf
} else {
0
}
ret[upper < lower] <- NaN
ind <- x >= lower & x <= upper
if (any(ind)) {
denom <- pnorm(upper, mean, sd) - pnorm(
lower, mean,
sd
)
xtmp <- dnorm(x, mean, sd, log)
if (log) {
xtmp <- xtmp - log(denom)
} else {
xtmp <- xtmp / denom
}
ret[x >= lower & x <= upper] <- xtmp[ind]
}
ret
}
c3_target = function(x, y) exp(-(x^3+x*y+y^2))
c3_target_log_x = function(x, y) -(x^3+x*y)
c3_target_log_y = function(x, y) -(x*y+y^2)
c3_xy = xy
sd <- 5
for(i in 2:n)
{
currentx <- c3_xy[i - 1, 1]
currenty <- c3_xy[i - 1, 2]
#MH for x|y[i-1]
proposedx <- rnorm(1, currentx, sd)
log_A <- c3_target_log_x(proposedx, currenty) - c3_target_log_x(currentx, currenty)
#proposal ratio of truncated normal
c <-  dtnorm(x = currentx, mean = proposedx, sd = sd, lower = 0) /
dtnorm(x = proposedx, mean = currentx, sd = sd, lower = 0)
A <- exp(log_A) * c
c3_xy[i,1] <- ifelse(runif(1) < A, proposedx, currentx)
#MH for y|x[i]
current_x <- c3_xy[i, 1]
proposedy <- rnorm(1, currenty, sd)
log_A <- c3_target_log_y(current_x, proposedy) - c3_target_log_y(current_x, currenty)
A <- exp(log_A)
c3_xy[i,2] <- ifelse(runif(1) < A, proposedy, currenty)
}
dtnorm <- function(x, mean = 0, sd = 1, lower = -Inf, upper = Inf, log = FALSE) {
ret <- numeric(length(x))
ret[x <= lower | x >= upper] <- if (log) {
-Inf
} else {
0
}
ret[upper < lower] <- NaN
ind <- x > lower & x < upper
if (any(ind)) {
denom <- pnorm(upper, mean, sd) - pnorm(
lower, mean,
sd
)
xtmp <- dnorm(x, mean, sd, log)
if (log) {
xtmp <- xtmp - log(denom)
} else {
xtmp <- xtmp / denom
}
ret[x >= lower & x <= upper] <- xtmp[ind]
}
ret
}
dtnorm(1)
dtnorm(1, lower = 0)
dtnorm(0, lower = 0)
dtnorm(-.1, lower = 0)
dtnorm <- function(x, mean = 0, sd = 1, lower = -Inf, upper = Inf, log = FALSE) {
ret <- numeric(length(x))
ret[x <= lower | x >= upper] <- if (log) {
-Inf
} else {
0
}
ret[upper < lower] <- NaN
ind <- x > lower & x < upper
if (any(ind)) {
denom <- pnorm(upper, mean, sd) - pnorm(
lower, mean,
sd
)
xtmp <- dnorm(x, mean, sd, log)
if (log) {
xtmp <- xtmp - log(denom)
} else {
xtmp <- xtmp / denom
}
ret[x > lower & x < upper] <- xtmp[ind]
}
ret
}
c3_target = function(x, y) exp(-(x^3+x*y+y^2))
c3_target_log_x = function(x, y) -(x^3+x*y)
c3_target_log_y = function(x, y) -(x*y+y^2)
c3_xy = xy
sd <- 5
for(i in 2:n)
{
currentx <- c3_xy[i - 1, 1]
currenty <- c3_xy[i - 1, 2]
#MH for x|y[i-1]
proposedx <- rnorm(1, currentx, sd)
log_A <- c3_target_log_x(proposedx, currenty) - c3_target_log_x(currentx, currenty)
#proposal ratio of truncated normal
c <-  dtnorm(x = currentx, mean = proposedx, sd = sd, lower = 0) /
dtnorm(x = proposedx, mean = currentx, sd = sd, lower = 0)
A <- exp(log_A) * c
c3_xy[i,1] <- ifelse(runif(1) < A, proposedx, currentx)
#MH for y|x[i]
current_x <- c3_xy[i, 1]
proposedy <- rnorm(1, currenty, sd)
log_A <- c3_target_log_y(current_x, proposedy) - c3_target_log_y(current_x, currenty)
A <- exp(log_A)
c3_xy[i,2] <- ifelse(runif(1) < A, proposedy, currenty)
}
proposedx <- rnorm(1, 10, 5)
dtnorm(x = 10, mean = proposedx, sd = 5, lower = 0)
c3_target = function(x, y) exp(-(x^3+x*y+y^2))
c3_target_log_x = function(x, y) -(x^3+x*y)
c3_target_log_y = function(x, y) -(x*y+y^2)
c3_xy = xy
sd <- 5
c3_target = function(x, y) exp(-(x^3+x*y+y^2))
c3_target_log_x = function(x, y) -(x^3+x*y)
c3_target_log_y = function(x, y) -(x*y+y^2)
c3_xy = xy
sd <- 5
for(i in 2:n)
{
currentx <- c3_xy[i - 1, 1]
currenty <- c3_xy[i - 1, 2]
#MH for x|y[i-1]
proposedx <- rnorm(1, currentx, sd)
log_A <- c3_target_log_x(proposedx, currenty) - c3_target_log_x(currentx, currenty)
#proposal ratio of truncated normal
c <-  dtnorm(x = currentx, mean = proposedx, sd = sd, lower = 0) /
dtnorm(x = proposedx, mean = currentx, sd = sd, lower = 0)
A <- exp(log_A) * c
c3_xy[i,1] <- ifelse(runif(1) < A, proposedx, currentx)
#MH for y|x[i]
current_x <- c3_xy[i, 1]
proposedy <- rnorm(1, currenty, sd)
log_A <- c3_target_log_y(current_x, proposedy) - c3_target_log_y(current_x, currenty)
A <- exp(log_A)
c3_xy[i,2] <- ifelse(runif(1) < A, proposedy, currenty)
}
dtnorm <- function(x, mean = 0, sd = 1, lower = -Inf, upper = Inf, log = FALSE) {
ret <- numeric(length(x))
ret[x < lower | x > upper] <- if (log) {
-Inf
} else {
0
}
ret[upper < lower] <- NaN
ind <- x >= lower & x <= upper
if (any(ind)) {
denom <- pnorm(upper, mean, sd) - pnorm(
lower, mean,
sd
)
xtmp <- dnorm(x, mean, sd, log)
if (log) {
xtmp <- xtmp - log(denom)
} else {
xtmp <- xtmp / denom
}
ret[x >= lower & x <= upper] <- xtmp[ind]
}
ret
}
c3_target = function(x, y) exp(-(x^3+x*y+y^2))
c3_target_log_x = function(x, y) -(x^3+x*y)
c3_target_log_y = function(x, y) -(x*y+y^2)
c3_xy = xy
sd <- 5
for(i in 2:n)
{
currentx <- c3_xy[i - 1, 1]
currenty <- c3_xy[i - 1, 2]
#MH for x|y[i-1]
proposedx <- rnorm(1, currentx, sd)
log_A <- c3_target_log_x(proposedx, currenty) - c3_target_log_x(currentx, currenty)
#proposal ratio of truncated normal
c <-  dtnorm(x = currentx, mean = proposedx, sd = sd, lower = 0) /
dtnorm(x = proposedx, mean = currentx, sd = sd, lower = 0)
A <- exp(log_A) * c
c3_xy[i,1] <- ifelse(runif(1) < A, proposedx, currentx)
#MH for y|x[i]
current_x <- c3_xy[i, 1]
proposedy <- rnorm(1, currenty, sd)
log_A <- c3_target_log_y(current_x, proposedy) - c3_target_log_y(current_x, currenty)
A <- exp(log_A)
c3_xy[i,2] <- ifelse(runif(1) < A, proposedy, currenty)
}
install.packages("truncnorm")
library(truncnorm)
c4_target = function(x, y) exp(-(x^3+x*y+y^3))
c4_target_log_x = function(x, y) -(x^3+x*y)
c4_target_log_y = function(x, y) -(x*y+y^3)
c4_xy = xy
sd <- 5
for(i in 2:n)
{
currentx <- c4_xy[i - 1, 1]
currenty <- c4_xy[i - 1, 2]
#MH for x|y[i-1]
proposedx <- rnorm(1, currentx, sd)
#check if proposed x is outside boundry
if (proposedx <= 0) {
c4_xy[i,1] <- currentx
} else {
log_A <- c4_target_log_x(proposedx, currenty) - c4_target_log_x(currentx, currenty)
#proposal ratio of truncated normal
c <- dtruncnorm(x = currentx, mean = proposedx, sd = sd, a = 0) /
dtruncnorm(x = proposedx, mean = currentx, sd = sd, a = 0)
A <- exp(log_A) * c
c4_xy[i,1] <- ifelse(runif(1) < A, proposedx, currentx)
}
#MH for y|x1[i]
current_x <- c4_xy[i, 1]
proposedy <- rnorm(1, currenty, sd)
#check if proposed y is outside boundry
if (proposedy <= 0) {
c4_xy[i,2] <- currenty
} else {
log_A <- c4_target_log_y(current_x, proposedy) - c4_target_log_y(current_x, currenty)
#proposal ratio of truncated normal
c <-  dtnorm(x = currenty, mean = proposedy, sd = sd, lower = 0) /
dtnorm(x = proposedy, mean = currenty, sd = sd, lower = 0)
A <- exp(log_A) * c
c4_xy[i,2] <- ifelse(runif(1) < A, proposedy, currenty)
}
}
qplot(c4_xy[,1], c4_xy[,2], geom="line", main = "2-D trace plot")
#remove burning
c4_xy <- c4_xy[-(1:burnin),]
#graphs
c4x_hist <- qplot(x = c4_xy[,1], y =..density.., geom="histogram",
bins = 25, fill=I("grey"),  col=I("black"), xlab = "x", ylab = "Density")
c4x_acf <- ggAcf(c4_xy[,1], main = "x ACF")
c4y_hist <- qplot(x = c4_xy[,2], y =..density.., geom="histogram",
bins = 25, fill=I("grey"),  col=I("black"), xlab = "y", ylab = "Density")
c4y_acf <- ggAcf(c4_xy[,2], main = "y ACF")
gridExtra::grid.arrange(grobs = list(c4x_hist, c4x_acf, c4y_hist, c4y_acf), nrow=4)
#plug x, y samples into target function
c4 <- c4_target(c4_xy[,1], c4_xy[,2])
#summary of target samples
c4_mean <- mean(c4)
c4_var <- var(c4)
c4_target = function(x, y) exp(-(x^3+x*y+y^3))
c4_target_log_x = function(x, y) -(x^3+x*y)
c4_target_log_y = function(x, y) -(x*y+y^3)
c4_xy = xy
sd <- 5
for(i in 2:n)
{
currentx <- c4_xy[i - 1, 1]
currenty <- c4_xy[i - 1, 2]
#MH for x|y[i-1]
proposedx <- rnorm(1, currentx, sd)
log_A <- c4_target_log_x(proposedx, currenty) - c4_target_log_x(currentx, currenty)
#proposal ratio of truncated normal
c <- dtruncnorm(x = currentx, mean = proposedx, sd = sd, a = 0) /
dtruncnorm(x = proposedx, mean = currentx, sd = sd, a = 0)
A <- exp(log_A) * c
c4_xy[i,1] <- ifelse(runif(1) < A, proposedx, currentx)
#MH for y|x1[i]
current_x <- c4_xy[i, 1]
proposedy <- rnorm(1, currenty, sd)
#check if proposed y is outside boundry
if (proposedy <= 0) {
c4_xy[i,2] <- currenty
} else {
log_A <- c4_target_log_y(current_x, proposedy) - c4_target_log_y(current_x, currenty)
#proposal ratio of truncated normal
c <-  dtnorm(x = currenty, mean = proposedy, sd = sd, lower = 0) /
dtnorm(x = proposedy, mean = currenty, sd = sd, lower = 0)
A <- exp(log_A) * c
c4_xy[i,2] <- ifelse(runif(1) < A, proposedy, currenty)
}
}
c3_target = function(x, y) exp(-(x^3+x*y+y^2))
c3_target_log_x = function(x, y) -(x^3+x*y)
c3_target_log_y = function(x, y) -(x*y+y^2)
c3_xy = xy
sd <- 5
for(i in 2:n)
{
currentx <- c3_xy[i - 1, 1]
currenty <- c3_xy[i - 1, 2]
#MH for x|y[i-1]
proposedx <- rnorm(1, currentx, sd)
log_A <- c3_target_log_x(proposedx, currenty) - c3_target_log_x(currentx, currenty)
#proposal ratio of truncated normal
c <- dtruncnorm(x = currentx, mean = proposedx, sd = sd, a = 0) /
dtruncnorm(x = proposedx, mean = currentx, sd = sd, a = 0)
A <- exp(log_A) * c
c3_xy[i,1] <- ifelse(runif(1) < A, proposedx, currentx)
#MH for y|x[i]
current_x <- c3_xy[i, 1]
proposedy <- rnorm(1, currenty, sd)
log_A <- c3_target_log_y(current_x, proposedy) - c3_target_log_y(current_x, currenty)
A <- exp(log_A)
c3_xy[i,2] <- ifelse(runif(1) < A, proposedy, currenty)
}
qplot(c3_xy[,1], c3_xy[,2], geom="line", main = "2-D trace plot")
#remove burning
c3_xy <- c3_xy[-(1:burnin),]
#graphs
c3x_hist <- qplot(x = c3_xy[,1], y =..density.., geom="histogram",
bins = 25, fill=I("grey"),  col=I("black"), xlab = "x", ylab = "Density")
c3x_acf <- ggAcf(c3_xy[,1], main = "x ACF")
library("knitr");
opts_chunk$set(echo = TRUE, results = TRUE , cache=TRUE, message=FALSE, warning = FALSE);
options(width = 100);
library("ggplot2");
library("dplyr");
library("forecast")
library(gridExtra)
library(rgl);
library(truncnorm)
n <- 10e4
burnin <- n / 2
x <- rep(NA,n)
x[1] <- 1
xy <- matrix(data = rep(NA, n), nrow = n, ncol = 2)
xy[1,] <- c(10,10)
c3_target = function(x, y) exp(-(x^3+x*y+y^2))
c3_target_log_x = function(x, y) -(x^3+x*y)
c3_target_log_y = function(x, y) -(x*y+y^2)
c3_xy = xy
sd <- 5
for(i in 2:n)
{
currentx <- c3_xy[i - 1, 1]
currenty <- c3_xy[i - 1, 2]
#MH for x|y[i-1]
proposedx <- rnorm(1, currentx, sd)
log_A <- c3_target_log_x(proposedx, currenty) - c3_target_log_x(currentx, currenty)
#proposal ratio of truncated normal
c <- dtruncnorm(x = currentx, mean = proposedx, sd = sd, a = 0) /
dtruncnorm(x = proposedx, mean = currentx, sd = sd, a = 0)
A <- exp(log_A) * c
c3_xy[i,1] <- ifelse(runif(1) < A, proposedx, currentx)
#MH for y|x[i]
current_x <- c3_xy[i, 1]
proposedy <- rnorm(1, currenty, sd)
log_A <- c3_target_log_y(current_x, proposedy) - c3_target_log_y(current_x, currenty)
A <- exp(log_A)
c3_xy[i,2] <- ifelse(runif(1) < A, proposedy, currenty)
}
qplot(c3_xy[,1], c3_xy[,2], geom="line", main = "2-D trace plot")
#remove burning
c3_xy <- c3_xy[-(1:burnin),]
#graphs
c3x_hist <- qplot(x = c3_xy[,1], y =..density.., geom="histogram",
bins = 25, fill=I("grey"),  col=I("black"), xlab = "x", ylab = "Density")
c3x_acf <- ggAcf(c3_xy[,1], main = "x ACF")
