ggplot2::facet_grid(.~key);
ggplot2::ggplot(comp.df.long, ggplot2::aes(x = tel.km2, y = value)) +
ggplot2::geom_boxplot() +
ggplot2::facet_grid(.~key);
name(comp.df)[ncol(comp.df)]
names(comp.df)[ncol(comp.df)]
names(comp.df)[ncol(comp.df)] <- "cluster"
ann.test.err.rates
comp.df <- cbind(z, tel.km2);
names(comp.df)[ncol(comp.df)] <- "cluster";
comp.df.long <- tidyr::gather(comp.df, key, value, -cluster);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::facet_grid(.~key);
control <- rpart::rpart.control(maxdepth = 3)
tel.ctree <- rpart::rpart(data = z,
formula = tel.km2 ~ .,
control = control,
method = 'class')
rpart.plot::rpart.plot(tel.ctree)         #print plot
print(tel.ctree)
rattle::asRules(tel.ctree, compact=FALSE) #print rules
View(comp.df.long)
comp.df <- cbind(z, tel.km2);
names(comp.df)[ncol(comp.df)] <- "cluster";
comp.df.long <- tidyr::gather(comp.df, key, value, -cluster);
comp.df.long$cluster <- as.factor(comp.df.long$cluster);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::facet_grid(.~key);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::facet_grid(.~key);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::facet_grid(.~key, nrow=2);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::facet_grid(.~key, ncol=2);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::facet_grid(.~key, cols=2);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() + ggplot2::facet_wrap(.~key, nrow=2);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
#ggplot2::facet_wrap(.~key, nrow=2);
control <- rpart::rpart.control(maxdepth = 3)
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() #+
str(comp.df.long)
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::facet_wrap(.~key, nrow=2);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::theme(
axis.text.x = element_blank()) +
ggplot2::facet_wrap(.~key, nrow=2);
axis.text.x = ggplot2::element_blank()) +
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank()) +
ggplot2::facet_wrap(.~key, nrow=2);
axis.ticks = ggplot2::element_blank()) +
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::theme(
axis.ticks = ggplot2::element_blank()) +
ggplot2::facet_wrap(.~key, nrow=2);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::facet_wrap(.~key, nrow=2);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
control <- rpart::rpart.control(maxdepth = 3)
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot()
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank()) +
ggplot2::facet_wrap(.~key, nrow=2);
comp.df <- cbind(z, tel.km2);
names(comp.df)[ncol(comp.df)] <- "cluster";
comp.df.long <- tidyr::gather(comp.df, key, value, -cluster);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank()) +
ggplot2::facet_wrap(.~key, nrow=2);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::facet_wrap(.~key, nrow=2);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank()) +
ggplot2::scale_x_discrete(name ="Cluster",
limits=c("1", "2"))
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank()) +
ggplot2::scale_x_discrete(name ="Cluster",
limits=c("1", "2")) +
ggplot2::facet_wrap(.~key, nrow=2);
ggplot2::ggplot(comp.df.long,
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank()) +
ggplot2::scale_x_discrete(name ="Cluster") +
ggplot2::facet_wrap(.~key, nrow=2);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank()) +
#ggplot2::scale_x_discrete(name ="Cluster") +
ggplot2::facet_wrap(.~key, nrow=2);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank()) +
ggplot2::scale_x_discrete(name ="Cluster") +
ggplot2::facet_wrap(.~key, nrow=2);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank()) +
#ggplot2::scale_x_discrete(name ="Cluster") +
ggplot2::facet_wrap(.~key, nrow=2);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank()) +
ggplot2::scale_x_discrete(name ="Cluster", labels=c("D0.5", "D1")) +
ggplot2::facet_wrap(.~key, nrow=2);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank()) +
ggplot2::facet_wrap(.~key, nrow=2);
ggplot2::ggplot(comp.df.long,
ggplot2::aes(group = cluster,
y = value)) +
ggplot2::geom_boxplot() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank()) +
ggplot2::facet_wrap(.~key, nrow=2) +
ggplot2::labs(title = "Land cover Classes") + ylab("SOC (g C/m2/yr)") + xlab("Land cover classes");
library(ggplot2)
ggplot(comp.df.long,
aes(group = cluster,
y = value)) +
geom_boxplot() +
theme(
axis.text.x = element_blank()) +
facet_wrap(.~key, nrow=2) +
labs(title = "Land cover Classes") + ylab("SOC (g C/m2/yr)") + xlab("Land cover classes");
ggplot(comp.df.long,
ggplot(comp.df.long,
ggplot(comp.df.long,
ggplot(comp.df.long,
ggplot(comp.df.long,
aes(group = cluster,
y = value)) +
geom_boxplot() +
theme(axis.text.x = element_blank()) +
facet_wrap(.~key, nrow=2) +
labs(title = xlab("Clusters"));
ggplot(comp.df.long,
aes(group = cluster,
y = value)) +
geom_boxplot() +
theme(axis.text.x = element_blank()) +
facet_wrap(.~key, nrow=2) +
xlab("Clusters");
kmstat<-function(x,k)
{
km<-kmeans(x,k)			# k-means clustering with k=3
ng<-km$size				# sample size
n<-dim(x)[1]
ssw<-sum(km$withinss)				# compute total within group ss
ssb<-km$betweenss				# between group ss
out<-list((n-k)*ssb/((k-1)*ssw),ng,km$cluster)# save stat, ng and cluster index into a list
names(out)<-c("stat","size","cluster")	# apply names to list
out						# output
}
km<-function(x,k,try=5) # default no. of trial is 5
{
res0<-kmstat(x,k);			# save the result of the first trial
r0<-res0$stat;				  # save the stat from the first trial
for (i in 2:try)
{
res<-kmstat(x,k);  	# new trial
if (res$stat>r0);
kmstat<-function(x,k)
{
km<-kmeans(x,k)			# k-means clustering with k=3
ng<-km$size				# sample size
n<-dim(x)[1]
ssw<-sum(km$withinss)				# compute total within group ss
ssb<-km$betweenss				# between group ss
out<-list((n-k)*ssb/((k-1)*ssw),ng,km$cluster)# save stat, ng and cluster index into a list
names(out)<-c("stat","size","cluster")	# apply names to list
out						# output
}
km<-function(x,k,try=5) # default no. of trial is 5
{
res0<-kmstat(x,k);			# save the result of the first trial
r0<-res0$stat;				  # save the stat from the first trial
for (i in 2:try)
{
res<-kmstat(x,k);  	# new trial
if (res$stat>r0);
kmstat<-function(x,k)
{
km<-kmeans(x,k)			# k-means clustering with k=3
ng<-km$size				# sample size
n<-dim(x)[1]
ssw<-sum(km$withinss)				# compute total within group ss
ssb<-km$betweenss				# between group ss
out<-list((n-k)*ssb/((k-1)*ssw),ng,km$cluster)# save stat, ng and cluster index into a list
names(out)<-c("stat","size","cluster")	# apply names to list
out						# output
}
km<-function(x,k,try=5) # default no. of trial is 5
{
res0<-kmstat(x,k);			# save the result of the first trial
r0<-res0$stat;				  # save the stat from the first trial
for (i in 2:try)
{
res<-kmstat(x,k);  	# new trial
if (res$stat>r0)
{			              # if new trial is better
r0<-res$stat;			# update r0 and res
res0<-res;
}
}
cat("cluster size=",res0$size,"\n");	# display cluster size
cat("stat=",res0$stat,"\n");		      # display stat
res0$cluster;			                  	# output cluster label
}
# function for standardize transformation
stand<-function(x)
{
n<-dim(x)[1];		# row dim of x
p<-dim(x)[2];		# column dim of x
m<-apply(x,2,mean);	# compute column mean
s<-apply(x,2,sd);	# compute column sd
m<-matrix(m,nr=n,nc=p,byrow=T);  # convert m into nxp matrix, each row is m
s<-matrix(s,nr=n,nc=p,byrow=T);  # convert s into nxp matrix, each row is s
(x-m)/s;		# output standardize score
}
ann<-function(x,y,size,maxit=100,linout=F,trace=F,try=5)
{
ann1<-nnet::nnet(y~.,data=x,size=size,maxit=maxit,linout=linout,trace=trace);
v1<-ann1$value;
for (i in 2:try)
{
ann<-nnet::nnet(y~.,data=x,size=size,maxit=maxit,linout=linout,trace=trace);
if (ann$value<v1)
{
v1<-ann$value;
ann1<-ann;
}
}
ann1;
}
knitr::opts_chunk$set(echo = TRUE)
library(forecast);
Y = ts(c(1.33,-0.56,-1.31,-0.37,0.05,0.46,2.00,
-0.19,-0.25,1.07,-0.17,1.14,0.63,-0.75,0.15,
0.71,0.45,-0.14,0.57,1.43));
model <- arima(Y, order = c(1,0,1));
forecast <- forecast::forecast(model);
model <- arima(Y, order = c(1,1,0));
forecast <- forecast::forecast(model);
model <- HoltWinters(Y, gamma=FALSE);
forecast <- forecast::forecast(model);
forecast
model <- arima(Y, order = c(1,0,1));
forecast <- forecast::forecast(model);
forecast
model <- arima(Y, order = c(1,1,0));
forecast <- forecast::forecast(model);
forecast
model <- HoltWinters(Y, beta = FALSE, gamma=FALSE);
forecast <- forecast::forecast(model);
forecast
x <- tseries::get.hist.quote(instrument = "0005.hk",
start = "2012-01-01",
end = "2016-01-01",
quote = "AdjClose");
y <- as.ts(as.numeric(diff(log(x))));
plot1 <- forecast::autoplot(y);
plot2 <- forecast::ggAcf(y);
gridExtra::grid.arrange(plot1, plot2, nrow=2);
forecast::ggAcf(y^2);
X_t <- model$residuals;
plot1 <- forecast::ggAcf(X_t);
X_t
model <- forecast::auto.arima(y, ic = "aic");
X_t <- model$residuals;
plot1 <- forecast::ggAcf(X_t);
plot2 <- forecast::ggAcf(X_t ^ 2);
gridExtra::grid.arrange(plot1, plot2, nrow=2);
dim(trainPC)
knitr::opts_chunk$set(echo = TRUE, cache=TRUE, results = TRUE)
#Prepare environment
set.seed(5104)
check.packages <- function(pkg)
{
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])];
if (length(new.pkg))
{
install.packages(new.pkg, dependencies = TRUE);
#sapply(pkg, require, character.only = TRUE);
}
}
# packeges required by project
packages<-c("caret",
"rpart",
"e1071",
"klaR",
"rattle",
"doParallel",
"parallel",
"randomForest",
"dplyr",
"ggplot2",
"lattice",);
knitr::opts_chunk$set(echo = TRUE, cache=TRUE, results = TRUE)
#Prepare environment
set.seed(5104)
check.packages <- function(pkg)
{
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])];
if (length(new.pkg))
{
install.packages(new.pkg, dependencies = TRUE);
#sapply(pkg, require, character.only = TRUE);
}
}
# packeges required by project
packages<-c("caret",
"rpart",
"e1071",
"klaR",
"rattle",
"doParallel",
"parallel",
"randomForest",
"dplyr",
"ggplot2",
"lattice");
check.packages(packages);
library(dplyr);
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
originalTrain <- read.csv(trainURL, header = TRUE)
originalTest <- read.csv(testURL, header = TRUE)
originalTest$problem_id <- NULL
originalTest$classe <- c("B", "A", "B", "A", "A", "E", "D", "B", "A", "A", "B", "C", "B", "A", "E", "E", "A", "B", "B", "B")
data <- rbind(originalTrain, originalTest)        #merge original training and test dataset
data <- data[sample(nrow(data)),]                 #randomise whole dataset
#Remove the first seven columns
data <- data[,-(1:7)];
#Remove NearZeroVariance variables
nzv <- caret::nearZeroVar(data, saveMetrics=TRUE)
data <- data[,nzv$nzv == FALSE]
#Clean variables with mostly NA
dataNA <- apply(data, 2, function(col){sum(is.na(col))/length(col)})
data <- data[,which(dataNA < .1)]
#Data slicing
inTrain <- caret::createDataPartition(y=data$classe, p=0.80, list=FALSE)
train <- data[inTrain,]
test <- data[-inTrain,]
str(train)
prComp <- caret::preProcess(train[,-length(train)], method = "pca", thresh = 0.99)
trainPC <- predict(prComp, train[,1:ncol(train)-1])
dim9
dim9trainPC
dim(trainPC)
dim(train)
dim(data)
library(parallel);
tc <- caret::trainControl(method = "cv",
number = 10,
verboseIter=FALSE ,
allowParallel=TRUE,
search="grid");
nb <- caret::train(classe ~ ., data = train, method = "nb", trControl= tc);
knn <- caret::train(classe ~ ., data = train, method = "knn", trControl= tc);
library(parallel);
tc <- caret::trainControl(method = "cv",
number = 10,
verboseIter=FALSE ,
allowParallel=TRUE);
nb <- caret::train(classe ~ ., data = train, method = "nb", trControl= tc);
knitr::opts_chunk$set(echo = TRUE, cache=TRUE, results = TRUE)
#Prepare environment
set.seed(5104)
check.packages <- function(pkg)
{
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])];
if (length(new.pkg))
{
install.packages(new.pkg, dependencies = TRUE);
#sapply(pkg, require, character.only = TRUE);
}
}
# packeges required by project
packages<-c("caret",
"rpart",
"e1071",
"klaR",
"rattle",
"doParallel",
"parallel",
"randomForest",
"dplyr",
"ggplot2",
"lattice");
check.packages(packages);
library(dplyr);
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
originalTrain <- read.csv(trainURL, header = TRUE)
originalTest <- read.csv(testURL, header = TRUE)
originalTest$problem_id <- NULL
originalTest$classe <- c("B", "A", "B", "A", "A", "E", "D", "B", "A", "A", "B", "C", "B", "A", "E", "E", "A", "B", "B", "B")
data <- rbind(originalTrain, originalTest)        #merge original training and test dataset
data <- data[sample(nrow(data)),]                 #randomise whole dataset
#Remove the first seven columns
data <- data[,-(1:7)];
#Remove NearZeroVariance variables
nzv <- caret::nearZeroVar(data, saveMetrics=TRUE)
data <- data[,nzv$nzv == FALSE]
#Clean variables with mostly NA
dataNA <- apply(data, 2, function(col){sum(is.na(col))/length(col)})
data <- data[,which(dataNA < .1)]
#Data slicing
inTrain <- caret::createDataPartition(y=data$classe, p=0.80, list=FALSE)
train <- data[inTrain,]
test <- data[-inTrain,]
str(train)
prComp <- caret::preProcess(train[,-length(train)], method = "pca", thresh = 0.99)
trainPC <- predict(prComp, train[,1:ncol(train)-1])
testPC <- predict(prComp, test[,1:ncol(test)-1])
library(parallel);
tc <- caret::trainControl(method = "cv",
number = 10,
verboseIter=FALSE ,
allowParallel=TRUE);
nb <- caret::train(classe ~ ., data = train, method = "nb", trControl= tc);
