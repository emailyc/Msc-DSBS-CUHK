str(z0)
str(x0)
x0 <- d0[, -c(2, 3, 18)]
x1 <- d1[, -c(2, 3, 18)]
tele.knn <- k_nn(x0, x1, as.factor(d0[, 18]), as.factor(d1[, 18]), v = 10)
classification.table <- table(tele.knn, as.factor(d1[,18]))
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
z0 <- scale.con(x0)
z1 <- scale.con(x1)
tele.knn <- k_nn(z0, z1, as.factor(d0[,18]), as.factor(d1[,18]), v = 10)
classification.table <- table(tele.knn, as.factor(d1[,18]))
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
str(d)
summary(d$Change)
summary(factor(d$Change))
d <- read.csv("tele.csv", header = TRUE, sep = ",")            #read data
d[,18] <- factor(d$Change,
levels = c(0, 1),
labels = c("stay", "change"))
inTrain <- createDataPartition(d$Change, p = .8) %>% unlist(.) #create index for train / test partition
d0 <- d[inTrain,]                                              #select observations for training
d1 <- d[-inTrain,]                                             #select observations for testing
summary(factor(d$Change))
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)
x0 <- d0[, continuous]
x1 <- d1[, continuous]
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
x0 <- d0[, -c(2, 3, 18)]
x1 <- d1[, -c(2, 3, 18)]
tele.knn <- k_nn(x0, x1, d0[, 18], d1[, 18], v = 10)
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
z0 <- scale.con(x0)
z1 <- scale.con(x1)
tele.knn <- k_nn(z0, z1, d0[,18], d1[,18], v = 10)
classification.table <- table(tele.knn, as.factor(d1[,18]))
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
str(d)
summary(d)
levels(d$Intl_plan)
labels(d$Intl_plan)
x <- d[, -c(2, 3)]
c2 <- as.factor(d$Intl_plan)
c3 <- as.factor(d$Vmail_plan)
class(c3)
head(c3)
str(d)
str(d0)
x <- d[, continuous]
c2 <- as.factor(d$Intl_plan)
c3 <- as.factor(d$Vmail_plan)
dc <- cbind(c2, c3, x)
d0 <- dc[inTrain,]                                             #select observations for training
d1 <- dc[-inTrain,]
str(d0)
tele.nb<-e1071::naiveBayes(d0, c0)
inTrain
tele.nb<-e1071::naiveBayes(d0, c0)
dc <- cbind(c2, c3, x)
d0 <- dc[inTrain,]                                             #select observations for training
c0 <- d[inTrain, Change]
d[inTrain, Change]
d$Change
dc <- cbind(c2, c3, x)
d0 <- dc[inTrain,]                                             #select observations for training
c0 <- d$Change[inTrain, ]
d$Change[inTrain, ]
dim(d$Change)
dc <- cbind(c2, c3, x)
d0 <- dc[inTrain,]                                             #select observations for training
c0 <- d$Change[inTrain]
d1 <- dc[-inTrain,]
c1 <- d$Change[-inTrain]
tele.nb<-e1071::naiveBayes(d0, c0)
pr<-predict(tele.nb,d1)
table(pr,c1)
tele.nb<-e1071::naiveBayes(d0, c0)
pr<-predict(tele.nb,d1)
classification.table <- table(pr,c1)
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
err.rate
d <- read.csv("tele.csv", header = TRUE, sep = ",")
setwd("~/Google Drive/MSc Data Science/2018R2 Data Mining (STAT5104)/Assignment/2")
d <- read.csv("tele.csv", header = TRUE, sep = ",")
levels(d$Change)
str(d)
summary(d)
hihi = factor(d$Change)
summary(hihi)
table(d$Change)
d <- read.csv("tele.csv", header = TRUE, sep = ",")            #read data
d[,18] <- factor(d$Change,
levels = c(0, 1),
labels = c("stay", "change"))
inTrain <- caret::createDataPartition(d$Change, p = .8) %>% unlist(.)                                                                                                   #create index for train / test partition
d0 <- d[inTrain,]                                              #select observations for training
d1 <- d[-inTrain,]                                             #select observations for testing
table(d$Change)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
set.seed(17920)
library(class)
k_nn<-function(x0,x1,cl0,cl1,v,l=0,prob=F,use.all=T) {
err0=1					# initialize error rate
if (length(v)==1) v<-c(1:v)			# change v to an integer vector 1:v
for (k in v) {
res<-knn(x0,x1,cl0,k,l,prob,use.all)	# apply knn
ctab<-table(res,cl1)			# save c-table
err<-1-sum(diag(ctab))/sum(ctab)		# compute error rate
if (err<err0) {				# update if err<err0
k0<-k
res0<-res
err0<-err
ctab0<-ctab
}
cat("k=",k," error rate=",err,"\n")		# display results
}
cat("best k=",k0," error rate=",err0,"\n")	# display best result
res0						# output res0
}
# function to scale continuous or ordinal variables to [0,1]
scale.con<-function(d) {
n<-dim(d)[1]		# row dim of d
p<-dim(d)[2]		# column dim of d
cmin<-apply(d,2,min)	# column min of d
cmax<-apply(d,2,max)	# column max of d
range<-cmax-cmin	# column range
cmin<-matrix(cmin,nr=n,nc=p,byrow=T)	  # change cmin to a nxp matrix
range<-matrix(range,nr=n,nc=p,byrow=T)  # change range to a nxp matrix
(d-cmin)/range	# transform d
}
d <- read.csv("tele.csv", header = TRUE, sep = ",")            #read data
d[,18] <- factor(d$Change,
levels = c(0, 1),
labels = c("stay", "change"))
inTrain <- caret::createDataPartition(d$Change, p = .8) %>% unlist(.)                                                                                                   #create index for train / test partition
d0 <- d[inTrain,]                                              #select observations for training
d1 <- d[-inTrain,]                                             #select observations for testing
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)
x0 <- d0[, continuous]
x1 <- d1[, continuous]
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
x0 <- d0[, -c(2, 3, 18)]
x1 <- d1[, -c(2, 3, 18)]
tele.knn <- k_nn(x0, x1, d0[, 18], d1[, 18], v = 10)
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
z0 <- scale.con(x0)
z1 <- scale.con(x1)
tele.knn <- k_nn(z0, z1, d0[,18], d1[,18], v = 10)
classification.table <- table(tele.knn, as.factor(d1[,18]))
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
x <- d[, continuous]
c2 <- as.factor(d$Intl_plan)
c3 <- as.factor(d$Vmail_plan)
dc <- cbind(c2, c3, x)
d0 <- dc[inTrain,]                                             #select observations for training
c0 <- d$Change[inTrain]
d1 <- dc[-inTrain,]
c1 <- d$Change[-inTrain]
tele.nb<-e1071::naiveBayes(d0, c0)
pr<-predict(tele.nb,d1)
classification.table <- table(pr,c1)
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
str(x)
pr
d <- read.csv("tele.csv", header = TRUE, sep = ",")           #read data
d[,18] <- factor(d$Change,
levels = c(0, 1),
labels = c("stay", "change"))
inTrain <- caret::createDataPartition(d$Change, p = .8) #%>%   #create index for train / test partition
#unlist(.)
d0 <- d[inTrain,]                                             #select observations for training
d <- read.csv("tele.csv", header = TRUE, sep = ",")           #read data
d[,18] <- factor(d$Change,
levels = c(0, 1),
labels = c("stay", "change"))
inTrain <- caret::createDataPartition(d$Change, p = .8, list = FALSE) #%>%   #create index for train / test partition
#unlist(.)
d0 <- d[inTrain,]                                             #select observations for training
d1 <- d[-inTrain,]                                            #select observations for testing
library(class)
k_nn<-function(x0,x1,cl0,cl1,v,l=0,prob=F,use.all=T) {
err0=1					# initialize error rate
if (length(v)==1) v<-c(1:v)			# change v to an integer vector 1:v
for (k in v) {
res<-knn(x0,x1,cl0,k,l,prob,use.all)	# apply knn
ctab<-table(res,cl1)			# save c-table
err<-1-sum(diag(ctab))/sum(ctab)		# compute error rate
if (err<err0) {				# update if err<err0
k0<-k
res0<-res
err0<-err
ctab0<-ctab
}
cat("k=",k," error rate=",err,"\n")		# display results
}
cat("best k=",k0," error rate=",err0,"\n")	# display best result
res0						# output res0
}
# function to scale continuous or ordinal variables to [0,1]
scale.con<-function(d) {
n<-dim(d)[1]		# row dim of d
p<-dim(d)[2]		# column dim of d
cmin<-apply(d,2,min)	# column min of d
cmax<-apply(d,2,max)	# column max of d
range<-cmax-cmin	# column range
cmin<-matrix(cmin,nr=n,nc=p,byrow=T)	  # change cmin to a nxp matrix
range<-matrix(range,nr=n,nc=p,byrow=T)  # change range to a nxp matrix
(d-cmin)/range	# transform d
}
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
hihi = classification.table
d <- read.csv("tele.csv", header = TRUE, sep = ",")           #read data
d[,18] <- factor(d$Change,
levels = c(0, 1),
labels = c("stay", "change"))
inTrain <- caret::createDataPartition(d$Change,               #create index for train / test partition
p = .8,
list = FALSE)
d0 <- d[inTrain,]                                             #select observations for training
d1 <- d[-inTrain,]                                            #select observations for testing
d <- read.csv("tele.csv", header = TRUE, sep = ",")           #read data
d[,18] <- factor(d$Change,
levels = c(0, 1),
labels = c("stay", "change"))
inTrain <- caret::createDataPartition(d$Change,               #create index for train / test partition
p = .8,
list = FALSE)
d0 <- d[inTrain,]                                             #select observations for training
d1 <- d[-inTrain,]                                            #select observations for testing
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
hihi
d <- read.csv("tele.csv", header = TRUE, sep = ",")           #read data
d[,18] <- factor(d$Change,
levels = c(0, 1),
labels = c("stay", "change"))
inTrain <- caret::createDataPartition(d$Change,               #create index for train / test partition
p = .8,
list = FALSE)
d0 <- d[inTrain,]                                             #select observations for training
d1 <- d[-inTrain,]
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
set.seed(17920)
d <- read.csv("tele.csv", header = TRUE, sep = ",")           #read data
d[,18] <- factor(d$Change,
levels = c(0, 1),
labels = c("stay", "change"))
inTrain <- caret::createDataPartition(d$Change,               #create index for train / test partition
p = .8,
list = FALSE)
d0 <- d[inTrain,]                                             #select observations for training
d1 <- d[-inTrain,]                                            #select observations for testing
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
set.seed(17920)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
set.seed(17920)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
set.seed(17920)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
set.seed(17920)
d <- read.csv("tele.csv", header = TRUE, sep = ",")           #read data
d[,18] <- factor(d$Change,
levels = c(0, 1),
labels = c("stay", "change"))
inTrain <- caret::createDataPartition(d$Change,               #create index for train / test partition
p = .8,
list = FALSE)
d0 <- d[inTrain,]                                             #select observations for training
d1 <- d[-inTrain,]                                            #select observations for testing
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
set.seed(17920)
d <- read.csv("tele.csv", header = TRUE, sep = ",")           #read data
d[,18] <- factor(d$Change,
levels = c(0, 1),
labels = c("stay", "change"))
inTrain <- caret::createDataPartition(d$Change,               #create index for train / test partition
p = .8,
list = FALSE)
d0 <- d[inTrain,]                                             #select observations for training
d1 <- d[-inTrain,]                                            #select observations for testing
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
set.seed(17920)
d <- read.csv("tele.csv", header = TRUE, sep = ",")           #read data
d[,18] <- factor(d$Change,
levels = c(0, 1),
labels = c("stay", "change"))
inTrain <- caret::createDataPartition(d$Change,               #create index for train / test partition
p = .8,
list = FALSE)
d0 <- d[inTrain,]                                             #select observations for training
d1 <- d[-inTrain,]                                            #select observations for testing
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
set.seed(17920)
d <- read.csv("tele.csv", header = TRUE, sep = ",")           #read data
d[,18] <- factor(d$Change,
levels = c(0, 1),
labels = c("stay", "change"))
inTrain <- caret::createDataPartition(d$Change,               #create index for train / test partition
p = .8,
list = FALSE)
d0 <- d[inTrain,]                                             #select observations for training
d1 <- d[-inTrain,]                                            #select observations for testing
continuous <- c(5, 7, 8, 10, 11, 13, 14, 16)      #Column index for continuous variables
x0 <- d0[, continuous]                            #Select continuous variables for training data
x1 <- d1[, continuous]                            #Select continuous variables for testing data
tele.knn <- k_nn(x0, x1, d0[,18], d1[,18], v = 10)#KNN
classification.table <- table(tele.knn, d1[,18])
err.rate <- (classification.table[1,2] + classification.table[2,1])  / sum(classification.table)
classification.table
